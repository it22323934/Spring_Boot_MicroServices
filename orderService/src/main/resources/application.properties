spring.application.name=orderService
spring.datasource.url=jdbc:mysql://localhost:3306/order_service
spring.datasource.username=root
spring.datasource.password=mysql
spring.jpa.hibernate.ddl-auto=none
server.port=8081
inventory.service.url=http://localhost:8082
# swagger-ui custom path
springdoc.swagger-ui.path=/swagger-ui.html
# /api-docs endpoint custom path
springdoc.api-docs.path=/api-docs

#Actuatuor Endpoints
management.health.circuitbreakers.enabled=true
management.endpoints.web.exposure.include=*
management.endpoint.health.show-details=always

#Resilinence4j Properties
resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true
resilience4j.circuitbreaker.instances.inventory.slidingWindowType=COUNT_BASED
#Counts 10 failure request inorder to determine when to activate the circuit breaker
resilience4j.circuitbreaker.instances.inventory.slidingWindowSize=10
#50% of the requests failure resulting the activation of the circuit breaker
resilience4j.circuitbreaker.instances.inventory.failureRateThreshold=50
#The circuit breaker will be in open state for 5 seconds
resilience4j.circuitbreaker.instances.inventory.waitDurationInOpenState=5s
#Permited number of calls in half open state. If it recognises that all calls are successfully in the half open state then it will make the circuit breaker go to close.
#If all the calls fail in the half open state then it goes to open state again
resilience4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=3
resilience4j.circuitbreaker.instances.inventory.automaticTransitionFromOpenToHalfOpenEnabled=true
#If this is not set the circuit won't open until all 10 request fails. This will consider the minimum number of calls to be considered to open the circuit breaker
resilience4j.circuitbreaker.instances.inventory.minimum-number-of-calls=5

#Resilience4j Timeout Properties
#If the external service taking more than 3 seconds then its considered a failure and if 50% threshold is reached then the circuit breaker is activated
resilience4j.timelimiter.instances.inventory.timeout-duration=3s


#Resilience4j retry Properties
resilience4j.retry.instances.inventory.max-attempts=3
resilience4j.retry.instances.inventory.wait-duration=2s

#Kakf Properties
spring.kafka.bootstrap-servers=localhost:9092
spring.kafka.template.default-topic=order-placed
#How kafka serialises the messages
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
spring.kafka.producer.value-serializer=io.confluent.kafka.serializers.KafkaAvroSerializer
spring.kafka.producer.properties.schema.registry.url=http://127.0.0.1:8085

loki.url=http://localhost:3100/loki/api/v1/push